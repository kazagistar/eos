--[[ Creates a buffer that stores written data]]--
buffer = {}
function buffer.create(xsize, ysize, blink, defTextColor, defBackColor)
    local buff = {}
    buff.xsize = xsize
    buff.ysize = ysize
    buff.blink = blink or false
    buff.defTextColor = defTextColor
    buff.defBackColor = defBackColor
    buff.colored = not not (defTextColor and defBackColor)
    assert(buff.colored or not (defTextColor or defBackColor),
        "Must set both defaults or neither")
    
    buff.xcursor = 1
    buff.ycursor = 1
    buff.lines = {}
    
    --buff.textColor and buff.backColor start nil
    
    return buff
end

function buffer.write(buff, str)
    local x, y = buff.xcursor, buff.ycursor
    local len = str:len()
    buffer.setCursorPos(buff,x+len,y)
    local line = buff.lines[y]
    if not line then
        line = {{}}
        buff.lines[y] = line
    end
    local text, textColor, backColor = unpack(line)
    for i=1,len do
        -- print("Writing "..str:sub(i,i).."["..tostring(i).."] to ("..tostring(i+x-1)..", "..y..")")
        text[i+x-1] = str:sub(i,i)
    end
    local color = buff.textColor
    if color then
        if not textColor then
            textColor = {}
            line[2] = textColor
        end
        for i=x,len+x-1 do
            textColor[i] = color
        end
    elseif textColor then
        for i=x,len+x-1 do
            textColor[i] = nil
        end
    end
    local color = buff.backColor
    if color then
        if not backColor then
            backColor = {}
            line[3] = backColor
        end
        for i=x,len+x-1 do
            backColor[i] = color
        end
    elseif textColor then
        for i=x,len+x-1 do
            backColor[i] = nil
        end
    end
end

function buffer.clear(buff)
    buff.lines = {}
end

function buffer.clearLine(buff)
    buff.lines[buff.ycursor] = nil
end

function buffer.getCursorPos(buff)
    return buff.xcursor, buff.ycursor
end

function buffer.setCursorPos(buff, x, y)
    buff.xcursor = math.min(x, buff.xsize)
    buff.ycursor = math.min(y, buff.ysize)
end

function buffer.setCursorBlink(buff, bool)
    buff.blink = bool
end

function buffer.isColor(buff)
    return buff.colored
end

function buffer.getSize(buff)
    return buff.xsize, buff.ysize
end

function scroll(buff, n)
    local new = {}
    for k, v in pairs(buff.lines) do
        if k>n then
            new[k+n] = v
        end
    end
    buff.lines = new
end

-- These should not be added to an uncolored buffer
function buffer.setTextColor(buff, color)
    if color == buff.defTextColor then 
        buff.textColor = nil
    else
        buff.textColor = color
    end
end
function buffer.setBackgroundColor(buff, color)
    if color == buff.defBackColor then 
        buff.backColor = nil
    else
        buff.backColor = color
    end
end

b = buffer.create(10,10)
buffer.write(b,"test")
buffer.write(b,"stuff")
buffer.setCursorPos(b,3,1)
buffer.write(b,"hello")
print(b.lines[1][1][2])
